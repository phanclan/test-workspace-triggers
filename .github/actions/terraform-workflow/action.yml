name: 'terraform-plan-approve-apply'
description: 'Common workflow for Terraform'
inputs:
  working-directory:
    description: 'Working directory for this action'
    required: false
    default: '.'
  who-to-greet:  # ID of input
    description: 'Who to greet'
    required: false
    default: 'World'
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
  fmt:
    description: "Status of terraform format"
    value: ${{ steps.fmt.outputs.test }}
  tf_init:
    description: "Status of terraform init"
    value: ${{ steps.init.outputs.test }}
  validate:
    description: "Status of terraform validate"
    value: ${{ steps.validate.outputs.test }}

runs:
  using: "composite"
  steps:
    - name: Hello
      run: echo Hello ${{ inputs.who-to-greet }}.
      shell: bash
    - name: Random Number Generator
      id: random-number-generator
      run: echo "::set-output name=random-id::$(echo $RANDOM)"
      shell: bash
    - name: Goodbye Script
      run: ${{ github.action_path }}/goodbye.sh
      shell: bash

    - name: Terraform Format
      id: fmt
      run: if terraform fmt -check; then echo "::set-output name=test::success"; else echo "::set-output name=test::fail"; fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Terraform Init
      id: init
      run: if terraform init -input=false; then echo "::set-output name=test::success"; else echo "::set-output name=test::fail"; fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Terraform Validate
      id: validate
      run: |
        if terraform validate -no-color; then
        terraform version
        else
        echo else
        fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}
